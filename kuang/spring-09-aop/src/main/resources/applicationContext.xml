<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/aop
         https://www.springframework.org/schema/aop/spring-aop.xsd">


    <!--注册bean-->
    <bean id="userService" class="com.zlx.aop.service.impl.UserServiceImpl"/>
    <bean id="log" class="com.zlx.aop.log.Log"/>
    <bean id="afterlog" class="com.zlx.aop.log.AfterLog"/>


    <!--    方法一：使用原生Spring API接口    主要是SpringAPI接口实现-->
    <!--配置aop：需要导入aop的约束-->
    <aop:config>
        <!--切入点:expression 表达式：execution(要执行的位置！)-->
        <aop:pointcut id="pointcut" expression="execution(* com.zlx.aop.service.impl.UserServiceImpl.*(..))"/>

        <!--执行环绕增加！-->
        <aop:advisor advice-ref="log" pointcut-ref="pointcut"/>
        <aop:advisor advice-ref="afterlog" pointcut-ref="pointcut"/>

    </aop:config>


    <!--    方法二：自定义  主要是切面定义-->
    <bean id="diy" class="com.zlx.aop.diy.DiyPointCut"/>
    <aop:config>
        <!-- aspect  切面-->
        <!--自定义切面  ref 要运用的类-->
        <aop:aspect ref="diy">
            <!--切入点-->
            <!--execution(返回类型 包名.类名(..)方法名)-->
            <aop:pointcut id="point" expression="execution(* com.zlx.aop.service.impl.UserServiceImpl.*(..))"/>
            <!--通知-->
            <aop:before method="before" pointcut-ref="point"/>
            <aop:after method="after" pointcut-ref="point"/>
        </aop:aspect>
    </aop:config>


    <!--    方法三：使用注解方式实现AOP-->
    <bean id="annocation" class="com.zlx.aop.annotation.AnnotationPointCut"/>
    <!--开启注解支持          JDK(默认 false)     cglib(true)-->
    <aop:aspectj-autoproxy proxy-target-class="false"/>

</beans>
